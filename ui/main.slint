/* Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
 * SPDX-License-Identifier: MIT OR Apache-2.0
 */

import {
    ComboBox, VerticalBox, HorizontalBox, GridBox, Button,
    LineEdit, ListView, GroupBox, CheckBox, TabWidget,
    AboutSlint
} from "std-widgets.slint";

import {
    Action, Feature, CargoView, Diag, DependencyData, DependencyNode, BuildingPane
} from "cargo.slint";

import { Toolchain, RustupView } from "rustup.slint";
import { CargoInstallView, InstalledCrate, CargoInstallData } from "install.slint";
import { CratesCompletionData } from "crates_completion.slint";
export {DependencyData, DependencyNode, CargoInstallData, CratesCompletionData }

CargoUI := Window {
    title: "Cargo UI";
    icon: @image-url("rust-logo.png");
    preferred_height: 500px;
    preferred_width: 300px;

    property <string> cargo-ui-version: "x.y.z";
    callback open-url(string);

    // Cargo aliases
    property status <=> cargo-view.status;
    property packages <=> cargo-view.packages;
    property allow-package_selection <=> cargo-view.allow_package-selection;
    property current-package <=> cargo-view.current-package;
    property extra-run <=> cargo-view.extra-run;
    property extra-test <=> cargo-view.extra-test;
    callback action <=> cargo-view.action;
    callback cancel <=> cargo-view.cancel;
    property is-building <=> cargo-view.is-building;
    property diagnostics <=> cargo-view.diagnostics;
    property workspace-valid <=> cargo-view.workspace-valid;
    property manifest-path <=> cargo-view.manifest-path;
    property build-results <=> cargo-view.build-results;
    property check-results <=> cargo-view.check-results;
    callback reload-manifest <=> cargo-view.reload-manifest;
    callback show-open-dialog <=> cargo-view.show-open-dialog;
    property build-pane-visible <=> cargo-view.build-pane-visible;
    property has-features <=> cargo-view.has-features;
    property package-features <=> cargo-view.package-features;
    property enable-default-features <=> cargo-view.enable-default-features;
    callback package-selected <=> cargo-view.package-selected;

    // Rustup aliases
    property toolchains <=> rustup-view.toolchains;
    property toolchains-available <=> rustup-view.toolchains-available;

    VerticalBox {
        TabWidget {
            // hide the widgets from the tab focus handler when covered:
            visible: !(is-building || build-pane-visible);

            Tab {
                title: "Project / Workspace";
                cargo-view := CargoView {
                    background: root.background;
                }
            }

            Tab {
                title: "Install";
                CargoInstallView { }
            }

            Tab {
                title: "Toolchains";
                rustup-view := RustupView { }
            }

            Tab {
                title: "About";
                VerticalBox {
                    Text {
                        text: "Cargo UI \{cargo-ui-version}";
                        font-size: 40px;
                    }
                    Text {
                        text: "https://github.com/slint-ui/cargo-ui";
                        color: blue;
                        TouchArea { clicked => { open-url(parent.text); } }
                    }
                    Text {
                        text: "License: GNU General Public License Version 3";
                        TouchArea { clicked => { open-url("https://github.com/slint-ui/cargo-ui/blob/master/LICENSE-GPL"); } }
                    }

                    Rectangle {}

                    HorizontalBox {
                        alignment: end;
                        vertical-stretch: 0;
                        AboutSlint { TouchArea { clicked => { open-url("https://slint-ui.com"); } } }
                    }
                }
            }
        }
    }

    animated := Rectangle {
        width: 100%; height: 100%;
        y: parent.height;
        states [
            visible when (is_building || build_pane_visible) : {
                y: 0;
            }
        ]
        transitions [
            in visible : {
                animate y { duration: 200ms; easing: ease; }
            }
            out visible : {
                animate y { duration: 200ms; easing: ease; }
            }
        ]
        if (animated.y < root.height): BuildingPane {
            background: root.background;
            status: root.status;
            diagnostics: root.diagnostics;
            cancel => { root.cancel() }
            back => { build_pane_visible = false; }
            is_building: root.is_building;
        }
    }
}
